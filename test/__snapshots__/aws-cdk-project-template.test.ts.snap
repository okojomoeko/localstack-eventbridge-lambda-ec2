// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot test 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61arm64C96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-arm64",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
  },
  "Resources": {
    "SampleEC243038771": {
      "DependsOn": [
        "SampleEC2InstanceRole349DA0CB",
      ],
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "IamInstanceProfile": {
          "Ref": "SampleEC2InstanceProfile59E07FDB",
        },
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestal2023amikernel61arm64C96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t4g.nano",
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "SampleEC2InstanceSecurityGroup839B849B",
              "GroupId",
            ],
          },
        ],
        "SubnetId": {
          "Ref": "SampleEC2VPCIsolatedSubnetSubnet1SubnetE75B5A35",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/SampleEC2/SampleEC2",
          },
        ],
        "UserData": {
          "Fn::Base64": "#!/bin/bash",
        },
      },
      "Type": "AWS::EC2::Instance",
    },
    "SampleEC2InstanceProfile59E07FDB": {
      "Properties": {
        "Roles": [
          {
            "Ref": "SampleEC2InstanceRole349DA0CB",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "SampleEC2InstanceRole349DA0CB": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/SampleEC2/SampleEC2",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SampleEC2InstanceSecurityGroup839B849B": {
      "Properties": {
        "GroupDescription": "MyTestStack/SampleEC2/SampleEC2/InstanceSecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/SampleEC2/SampleEC2",
          },
        ],
        "VpcId": {
          "Ref": "SampleEC2VPCF44F6120",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "SampleEC2VPCEc2endpoint55272413": {
      "Properties": {
        "PrivateDnsEnabled": true,
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "SampleEC2VPCEc2endpointSecurityGroupFF1BF08D",
              "GroupId",
            ],
          },
        ],
        "ServiceName": {
          "Fn::Join": [
            "",
            [
              "com.amazonaws.",
              {
                "Ref": "AWS::Region",
              },
              ".ec2",
            ],
          ],
        },
        "SubnetIds": [
          {
            "Ref": "SampleEC2VPCIsolatedSubnetSubnet1SubnetE75B5A35",
          },
        ],
        "VpcEndpointType": "Interface",
        "VpcId": {
          "Ref": "SampleEC2VPCF44F6120",
        },
      },
      "Type": "AWS::EC2::VPCEndpoint",
    },
    "SampleEC2VPCEc2endpointSecurityGroupFF1BF08D": {
      "Properties": {
        "GroupDescription": "MyTestStack/SampleEC2/VPC/Ec2endpoint/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": {
              "Fn::GetAtt": [
                "SampleEC2VPCF44F6120",
                "CidrBlock",
              ],
            },
            "Description": {
              "Fn::Join": [
                "",
                [
                  "from ",
                  {
                    "Fn::GetAtt": [
                      "SampleEC2VPCF44F6120",
                      "CidrBlock",
                    ],
                  },
                  ":443",
                ],
              ],
            },
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/SampleEC2/VPC",
          },
        ],
        "VpcId": {
          "Ref": "SampleEC2VPCF44F6120",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "SampleEC2VPCF44F6120": {
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/SampleEC2/VPC",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "SampleEC2VPCIsolatedSubnetSubnet1RouteTable3667068F": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyTestStack/SampleEC2/VPC/Isolated SubnetSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "SampleEC2VPCF44F6120",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "SampleEC2VPCIsolatedSubnetSubnet1RouteTableAssociation314524AF": {
      "Properties": {
        "RouteTableId": {
          "Ref": "SampleEC2VPCIsolatedSubnetSubnet1RouteTable3667068F",
        },
        "SubnetId": {
          "Ref": "SampleEC2VPCIsolatedSubnetSubnet1SubnetE75B5A35",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "SampleEC2VPCIsolatedSubnetSubnet1SubnetE75B5A35": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/16",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Isolated Subnet",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated",
          },
          {
            "Key": "Name",
            "Value": "MyTestStack/SampleEC2/VPC/Isolated SubnetSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "SampleEC2VPCF44F6120",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "ScheduledStartStopEC2EC2StartEvent2518C7CF": {
      "Properties": {
        "ScheduleExpression": "cron(0/2 * * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "ScheduledStartStopEC2StartStopEC2Lambda9636F772",
                "Arn",
              ],
            },
            "Id": "Target0",
            "Input": "{"COMMAND":"START"}",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "ScheduledStartStopEC2EC2StartEventAllowEventRuleMyTestStackScheduledStartStopEC2StartStopEC2Lambda73178C1F442AF8B8": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ScheduledStartStopEC2StartStopEC2Lambda9636F772",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "ScheduledStartStopEC2EC2StartEvent2518C7CF",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ScheduledStartStopEC2EC2StopEvent1CF6ECA1": {
      "Properties": {
        "ScheduleExpression": "cron(1/2 * * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "ScheduledStartStopEC2StartStopEC2Lambda9636F772",
                "Arn",
              ],
            },
            "Id": "Target0",
            "Input": "{"COMMAND":"STOP"}",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "ScheduledStartStopEC2EC2StopEventAllowEventRuleMyTestStackScheduledStartStopEC2StartStopEC2Lambda73178C1F79F725A0": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ScheduledStartStopEC2StartStopEC2Lambda9636F772",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "ScheduledStartStopEC2EC2StopEvent1CF6ECA1",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ScheduledStartStopEC2StartStopEC2Lambda9636F772": {
      "DependsOn": [
        "SampleEC2VPCIsolatedSubnetSubnet1RouteTableAssociation314524AF",
        "ScheduledStartStopEC2StartStopEC2LambdaServiceRoleDefaultPolicyA06D9D23",
        "ScheduledStartStopEC2StartStopEC2LambdaServiceRole00647507",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "fa6704506d8c8f4a65441409827b2d5581bb0ffae3b4abe734bdee17e566e34a.zip",
        },
        "Environment": {
          "Variables": {
            "EC2_INSTANCE_ID": {
              "Ref": "SampleEC243038771",
            },
          },
        },
        "Handler": "start_stop_ec2.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "ScheduledStartStopEC2StartStopEC2LambdaServiceRole00647507",
            "Arn",
          ],
        },
        "Runtime": "python3.12",
        "Timeout": 180,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "ScheduledStartStopEC2StartStopEC2LambdaSecurityGroupEA6D770B",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": [
            {
              "Ref": "SampleEC2VPCIsolatedSubnetSubnet1SubnetE75B5A35",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ScheduledStartStopEC2StartStopEC2LambdaSecurityGroupEA6D770B": {
      "DependsOn": [
        "SampleEC2VPCIsolatedSubnetSubnet1RouteTableAssociation314524AF",
      ],
      "Properties": {
        "GroupDescription": "Automatic security group for Lambda Function MyTestStackScheduledStartStopEC2StartStopEC2Lambda73178C1F",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": {
          "Ref": "SampleEC2VPCF44F6120",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ScheduledStartStopEC2StartStopEC2LambdaServiceRole00647507": {
      "DependsOn": [
        "SampleEC2VPCIsolatedSubnetSubnet1RouteTableAssociation314524AF",
      ],
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ScheduledStartStopEC2StartStopEC2LambdaServiceRoleDefaultPolicyA06D9D23": {
      "DependsOn": [
        "SampleEC2VPCIsolatedSubnetSubnet1RouteTableAssociation314524AF",
      ],
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:Start*",
                "ec2:Stop*",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ScheduledStartStopEC2StartStopEC2LambdaServiceRoleDefaultPolicyA06D9D23",
        "Roles": [
          {
            "Ref": "ScheduledStartStopEC2StartStopEC2LambdaServiceRole00647507",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
